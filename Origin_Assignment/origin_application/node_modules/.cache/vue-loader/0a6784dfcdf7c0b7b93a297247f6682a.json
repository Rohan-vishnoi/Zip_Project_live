{"remainingRequest":"C:\\Users\\aviro\\OneDrive\\Documents\\Github2\\Zip_Project\\Origin_Assignment\\origin_application\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\aviro\\OneDrive\\Documents\\Github2\\Zip_Project\\Origin_Assignment\\origin_application\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\aviro\\OneDrive\\Documents\\Github2\\Zip_Project\\Origin_Assignment\\origin_application\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\aviro\\OneDrive\\Documents\\Github2\\Zip_Project\\Origin_Assignment\\origin_application\\src\\views\\Session.vue?vue&type=template&id=e6aec368&scoped=true&","dependencies":[{"path":"C:\\Users\\aviro\\OneDrive\\Documents\\Github2\\Zip_Project\\Origin_Assignment\\origin_application\\src\\views\\Session.vue","mtime":1639382454473},{"path":"C:\\Users\\aviro\\OneDrive\\Documents\\Github2\\Zip_Project\\Origin_Assignment\\origin_application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aviro\\OneDrive\\Documents\\Github2\\Zip_Project\\Origin_Assignment\\origin_application\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\aviro\\OneDrive\\Documents\\Github2\\Zip_Project\\Origin_Assignment\\origin_application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aviro\\OneDrive\\Documents\\Github2\\Zip_Project\\Origin_Assignment\\origin_application\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlNlc3Npb24iIH0sIFsKICAgIF9jKAogICAgICAiaDIiLAogICAgICB7IHN0YXRpY1N0eWxlOiB7IGZsb2F0OiAibGVmdCIsICJtYXJnaW4tbGVmdCI6ICI1NXB4IiB9IH0sCiAgICAgIFsKICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkZJTFRFUlMiKV0pLAogICAgICAgIF9jKAogICAgICAgICAgImItbGlzdC1ncm91cC1pdGVtIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICJmaXQtY29udGVudCIgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS5EZWZhdWx0Y29udGVudCgpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJBbGwiKV0KICAgICAgICApLAogICAgICAgIF92bS5fbChfdm0ubGFiZWxhcnJheSwgZnVuY3Rpb24gKGxhYmVsKSB7CiAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICJiLWxpc3QtZ3JvdXAiLAogICAgICAgICAgICB7IGtleTogbGFiZWwsIHN0YXRpY0NsYXNzOiAibGFiZWxmaWx0ZXIiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWxpc3QtZ3JvdXAtaXRlbSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiZml0LWNvbnRlbnQiIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2VsZWN0b2JqZWN0cyhsYWJlbCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKGxhYmVsKSldCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIH0pLAogICAgICBdLAogICAgICAyCiAgICApLAogICAgX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgewogICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICB2YWx1ZTogX3ZtLnNlYXJjaGJhciA9PSBmYWxzZSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogInNlYXJjaGJhciA9PSBmYWxzZSIsCiAgICAgICAgICB9LAogICAgICAgIF0sCiAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250YWluZXJpbWFnZXMiLAogICAgICB9LAogICAgICBfdm0uX2woX3ZtLkltYWdlc2FycmF5LCBmdW5jdGlvbiAoaW1hZ2VzKSB7CiAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBrZXk6IGltYWdlcy5sYWJlbCwgc3RhdGljQ2xhc3M6ICJpbWFnZXMiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIyMDBweCIsIGhlaWdodDogIjIwMHB4IiwgbWFyZ2luOiAiMTBweCIgfSwKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IGltYWdlcy5pbWFnZSB9LAogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImItZm9ybSIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBpbmxpbmU6ICIiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZ3RodW1ibmFpbHMiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhpbWFnZXMubGFiZWwpKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgaW1hZ2VzLmxhYmVsID09ICIiCiAgICAgICAgICAgICAgICAgID8gX2MoImItZm9ybS1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItMiBtci1zbS0yIG1iLXNtLTAiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJpbmxpbmUtZm9ybS1pbnB1dC1uYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJFTlRFUiAgTEFCRUwiLAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udGV4dGxhYmVsLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS50ZXh0bGFiZWwgPSAkJHYKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInRleHRsYWJlbCIsCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICBpbWFnZXMubGFiZWwgPT0gIiIKICAgICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAgICJiLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhcmlhbnQ6ICJpbmZvIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLkFkZExhYmVsKGltYWdlcykKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkFkZCIpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICB9KSwKICAgICAgMAogICAgKSwKICAgIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgdmFsdWU6IF92bS5zZWFyY2hiYXIgPT0gdHJ1ZSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogInNlYXJjaGJhciA9PSB0cnVlIiwKICAgICAgICAgIH0sCiAgICAgICAgXSwKICAgICAgICBzdGF0aWNDbGFzczogImNvbnRhaW5lcmltYWdlcyIsCiAgICAgIH0sCiAgICAgIF92bS5fbChfdm0uc2VhcmNoZWRhcnJheSwgZnVuY3Rpb24gKGltYWdlcykgewogICAgICAgIHJldHVybiBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsga2V5OiBpbWFnZXMubGFiZWwsIHN0YXRpY0NsYXNzOiAiaW1hZ2VzIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMjAwcHgiLCBoZWlnaHQ6ICIyMDBweCIsIG1hcmdpbjogIjEwcHgiIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBpbWFnZXMuaW1hZ2UgfSwKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJiLWZvcm0iLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgaW5saW5lOiAiIiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmd0aHVtYm5haWxzIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoaW1hZ2VzLmxhYmVsKSksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIGltYWdlcy5sYWJlbCA9PSAiIgogICAgICAgICAgICAgICAgICA/IF9jKCJiLWZvcm0taW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTIgbXItc20tMiBtYi1zbS0wIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAiaW5saW5lLWZvcm0taW5wdXQtbmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiRU5URVIgIExBQkVMIiwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnRleHRsYWJlbCwKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udGV4dGxhYmVsID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0ZXh0bGFiZWwiLAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgaW1hZ2VzLmxhYmVsID09ICIiCiAgICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYi1idXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YXJpYW50OiAiaW5mbyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5BZGRMYWJlbChpbWFnZXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJBZGQiKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgfSksCiAgICAgIDAKICAgICksCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}