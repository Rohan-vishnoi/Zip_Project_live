{"remainingRequest":"C:\\Users\\aviro\\OneDrive\\Documents\\GitHub\\Origin_Assignment\\origin_application\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\aviro\\OneDrive\\Documents\\GitHub\\Origin_Assignment\\origin_application\\src\\views\\About.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\aviro\\OneDrive\\Documents\\GitHub\\Origin_Assignment\\origin_application\\src\\views\\About.vue","mtime":1639290833720},{"path":"C:\\Users\\aviro\\OneDrive\\Documents\\GitHub\\Origin_Assignment\\origin_application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aviro\\OneDrive\\Documents\\GitHub\\Origin_Assignment\\origin_application\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBKU1ppcCBmcm9tICJqc3ppcCI7CmltcG9ydCAqIGFzIFZ1ZSBmcm9tICd2dWUnIC8vIGluIFZ1ZSAzCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IFZ1ZUF4aW9zIGZyb20gJ3Z1ZS1heGlvcycKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJBYm91dCIsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIFVwbG9hZEZpbGU6IFtdLAogICAgICBzaG93RGF0YTogW10sCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgbmF2aWdhdGUoKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsgbmFtZTogIkhvbWUiIH0pOwogICAgfSwKICAgIHppcG1ldGhvZHMoZSkgewogICAgICBsZXQgZmlsZSA9IGUudGFyZ2V0LmZpbGVzWzBdOwoKICAgICAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CgogICAgICBmb3JtRGF0YS5hcHBlbmQoInppcCIsIGZpbGUpOwoKICAgICAgLy9jc3Ygb2YgUGVydGggaXMgY2FycmllZCBvdXQgb24gdGhlIHNlcnZlciBzaWRlLgoKICAgICAgLy9UaGlzIHRpbWUgcHJvY2Vzc2luZyBib2xkbHkgdGhyb3duIGludG8gdGhlIHNlcnZlci1zaWRlIGV2ZXJ5IHppcCBmaWxlLiBvbmx5IHRoZSBjc3YgZmlsZSB5b3UgaGF2ZSB0byByZXR1cm4gdG8gUGVydGguCgogICAgICBjb25zdCBheGlvc1Byb21pc2UgPSB0aGlzLiRheGlvcy5wb3N0KAogICAgICAgIGAke3Byb2Nlc3MuZW52LkFQSV9VUkx9L2FwaS91bnppcC9jc3ZgLAoKICAgICAgICBmb3JtRGF0YQogICAgICApOwoKICAgICAgLy9pbWFnZSBmaWxlIG5hbWUgKHBhdGgpIGZyb20sIHNldCB0aGUgcmVnZXhwIHRvIGdldCB0aGUgZmlsZSBuYW1lIG90aGVyIHRoYW4gdGhlIGV4dGVuc2lvbiB0byB0aGUgZ2xvYmFsCgogICAgICBjb25zdCByZWdleHBJbWdGaWxlID0gL3VwbG9hZF9kaXJcL2ltYWdlc1wvaXRlbVxkKlwuKGpwZ3xwbmd8Z2lmKS87CgogICAgICBjb25zdCByZWdleHBJbWdOYW1lID0gLyhpdGVtXGQqKVwuKGpwZ3xwbmd8Z2lmKS87IC8vdG8gYmFjayByZWZlcmVuY2UgdG8gYmUgYWJsZSB0byBnZXQgdGhlIHByZXZpb3VzIGV4dGVuc2lvbiBpcy4KCiAgICAgIC8vdGhlIHJldHVybiB2YWx1ZSBmcm9tIHRoZSBmdW5jdGlvbiBvZiBKU1ppcCBpcyBhZGFwdGVkIHRvIFByb2lzZSBvYmplY3QuCgogICAgICBjb25zdCBsb2FkZWRaaXAgPSBKU1ppcC5sb2FkQXN5bmMoZmlsZSk7CgogICAgICAvL3JldHJpZXZlIHRoZSBpbWFnZSBmcm9tIHRoZSB6aXAgZmlsZS4KCiAgICAgIGNvbnN0IGltZ0ZpbGVzID0gbG9hZGVkWmlwLnRoZW4oKHppcCkgPT4gewogICAgICAgIHJldHVybiB6aXAuZmlsZShyZWdleHBJbWdGaWxlKTsKICAgICAgfSk7CgogICAgICBsZXQgaW1nRGF0YU1hcCA9IG5ldyBNYXAoKTsKCiAgICAgIGNvbnN0IGltZ1Byb21pc2UgPSBpbWdGaWxlcy50aGVuKChmaWxlcykgPT4gewogICAgICAgIGZpbGVzLm1hcCgoemlwZikgPT4gewogICAgICAgICAgY29uc3QgaW1nRmlsZSA9IHJlZ2V4cEltZ0ZpbGUuZXhlYyh6aXBmLm5hbWUpOwoKICAgICAgICAgIGNvbnN0IGltZ05hbWUgPSByZWdleHBJbWdOYW1lLmV4ZWMoaW1nRmlsZSlbMV07IC8vc2luY2UgdGhlIHJldHVybiB2YWx1ZSBhbmQgdXNlIGEgYmFjay1yZWZlcmVuY2UgaXMgcmV0dXJuZWQgaW4gdGhlIEFycmF5IEdldHMgdGhlIHByZXZpb3VzIHRoYW4gdGhlIGV4dGVuc2lvbiB0byBpbmRleCBzcGVjaWZpZWQKCiAgICAgICAgICBpbWdEYXRhTWFwLnNldChpbWdOYW1lLCB6aXBmLmFzeW5jKCJibG9iIikpOyAvL1tJbWdfbmFtZSA9PiBQcm9taXNlT2JqXSBjb250aW51ZSB0byBzZXQgdGhlIE1hcCBvZgogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gaW1nRGF0YU1hcDsKICAgICAgfSk7CgogICAgICBQcm9taXNlLmFsbChbYXhpb3NQcm9taXNlLCBpbWdQcm9taXNlXSkudGhlbigoW2F4aW9zUmVzLCBpbWdSZXNdKSA9PiB7CiAgICAgICAgY29uc3Qgc2hvd0RhdGEgPSBheGlvc1Jlcy5kYXRhOyAvL0FQSSBXaGF0J3MgaW4gYXNzdW1lZCAuYXBpUmVzRGF0YSBhbiBhcnJheSBvZiBqc29uIGlzLCBbanNvbiwganNvbiAuLi5dIGlzIGluIGEgc3RhdGUgc3VjaCBhcy4KCiAgICAgICAgbGV0IGltZ1Byb21pc2VzID0gW107CgogICAgICAgIGZvciAoY29uc3QgaSBpbiBzaG93RGF0YSkgewogICAgICAgICAgLy9BUEkgaXMgYW5kIHRoYXQgaXQgY29udGFpbnMgYW5kICJpdGVtMDEiIHRvIHRoZSB2YWx1ZSBhcyBpdGVtX2lkLgoKICAgICAgICAgIGxldCBpbWdCbG9iUHJvbWlzZSA9IGltZ1Jlcy5nZXQoc2hvd0RhdGFbaV0uaXRlbV9pZCk7CgogICAgICAgICAgY29uc3QgaW1nUHJvbWlzZSA9IGltZ0Jsb2JQcm9taXNlLnRoZW4oKGltZ0Jsb2IpID0+IHsKICAgICAgICAgICAgY29uc3QgaW1nVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChpbWdCbG9iKTsgLy9nZW5lcmF0ZSBhIHVybCBmb3IgdXNlIGluIHRoZSBpbWcgdGFnIGZyb20gdGhlIEJsb2IuCgogICAgICAgICAgICBzaG93RGF0YVtpXVsiaW1nX3VybCJdID0gaW1nVXJsOyAvLydJbWdfdXJsJyBzdG9yaW5nIGltZ1VybCB1bmRlciB0aGUga2V5CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpbWdQcm9taXNlcy5wdXNoKGltZ1Byb21pc2UpOwogICAgICAgIH0KCiAgICAgICAgLy9BbW9uZyB0aGUgYWJvdmUgZm9yLCB0aGUgdmFsdWUgdG8gZ2V0IHRoZSB1cmwgb2YgdGhlIGltYWdlIHdpbGwgY29tZSBiYWNrIGluIFByaW9taXNlLAoKICAgICAgICAvL3N0b3JlZDsgLy9hbmQgc2VxdWVuY2VkIHRoZSBlbnRpcmUgUHJvbWlzZSwgc2luY2UgdGhlIGVuZCBjb250ZW50cyBvZiB0aGUgYXJyYXkgaXMgcHJvY2Vzc2VkIGFsbCB0aGUgc2hvd0RhdGEgdG8uCgogICAgICAgIC8vSWYgeW91IGRvIG5vdCBkbyB0aGlzLCBsb29rIG9uLCBkaXNwbGF5IGRhdGEgaXMgbG9zdC4KCiAgICAgICAgUHJvbWlzZS5hbGwoaW1nUHJvbWlzZXMpLnRoZW4oKCkgPT4gewogICAgICAgICAgdGhpcy5zaG93RGF0YSA9IHNob3dEYXRhOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgfSwKfTsK"},{"version":3,"sources":["About.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"About.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"about\">\n    <div style=\"height: 63vh; width: 100%\" class=\"file-container-wrapper\">\n      <h6>Drag and Drop file</h6>\n      <div>\n        <input type=\"file\" @change=\"zipmethods\" accept=\"application/zip\" />File\n        - Upload\n      </div>\n      <table>\n        <tr v-for=\"data in uploadData\" :key=\"data.url\">\n          <td><img :src=\"data.url\" /></td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n<script>\nimport JSZip from \"jszip\";\nimport * as Vue from 'vue' // in Vue 3\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\nexport default {\n  name: \"About\",\n  data() {\n    return {\n      UploadFile: [],\n      showData: [],\n    };\n  },\n  methods: {\n    navigate() {\n      this.$router.push({ name: \"Home\" });\n    },\n    zipmethods(e) {\n      let file = e.target.files[0];\n\n      let formData = new FormData();\n\n      formData.append(\"zip\", file);\n\n      //csv of Perth is carried out on the server side.\n\n      //This time processing boldly thrown into the server-side every zip file. only the csv file you have to return to Perth.\n\n      const axiosPromise = this.$axios.post(\n        `${process.env.API_URL}/api/unzip/csv`,\n\n        formData\n      );\n\n      //image file name (path) from, set the regexp to get the file name other than the extension to the global\n\n      const regexpImgFile = /upload_dir\\/images\\/item\\d*\\.(jpg|png|gif)/;\n\n      const regexpImgName = /(item\\d*)\\.(jpg|png|gif)/; //to back reference to be able to get the previous extension is.\n\n      //the return value from the function of JSZip is adapted to Proise object.\n\n      const loadedZip = JSZip.loadAsync(file);\n\n      //retrieve the image from the zip file.\n\n      const imgFiles = loadedZip.then((zip) => {\n        return zip.file(regexpImgFile);\n      });\n\n      let imgDataMap = new Map();\n\n      const imgPromise = imgFiles.then((files) => {\n        files.map((zipf) => {\n          const imgFile = regexpImgFile.exec(zipf.name);\n\n          const imgName = regexpImgName.exec(imgFile)[1]; //since the return value and use a back-reference is returned in the Array Gets the previous than the extension to index specified\n\n          imgDataMap.set(imgName, zipf.async(\"blob\")); //[Img_name => PromiseObj] continue to set the Map of\n        });\n\n        return imgDataMap;\n      });\n\n      Promise.all([axiosPromise, imgPromise]).then(([axiosRes, imgRes]) => {\n        const showData = axiosRes.data; //API What's in assumed .apiResData an array of json is, [json, json ...] is in a state such as.\n\n        let imgPromises = [];\n\n        for (const i in showData) {\n          //API is and that it contains and \"item01\" to the value as item_id.\n\n          let imgBlobPromise = imgRes.get(showData[i].item_id);\n\n          const imgPromise = imgBlobPromise.then((imgBlob) => {\n            const imgUrl = URL.createObjectURL(imgBlob); //generate a url for use in the img tag from the Blob.\n\n            showData[i][\"img_url\"] = imgUrl; //'Img_url' storing imgUrl under the key\n          });\n\n          imgPromises.push(imgPromise);\n        }\n\n        //Among the above for, the value to get the url of the image will come back in Priomise,\n\n        //stored; //and sequenced the entire Promise, since the end contents of the array is processed all the showData to.\n\n        //If you do not do this, look on, display data is lost.\n\n        Promise.all(imgPromises).then(() => {\n          this.showData = showData;\n        });\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n#FileUpload {\n  width: 100%;\n  background-color: aliceblue;\n  height: 37vh;\n  position: relative;\n  text-align: right;\n  opacity: 0;\n}\n</style>\n"]}]}